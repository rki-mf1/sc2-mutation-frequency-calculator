#!/usr/bin/env python3

# Research Internship RKI FU Berlin
# Ashkan Ghassemi
# Variant specific PCR finder

import pandas as pd 
#import yaml # 1)configuration file for params 2) environment.yml 
import os.path # maybe for storage
from os import path 
import itertools
from sys import exit 
import argparse
import warnings
from collections import Counter
#import matplotlib.pyplot as plt # heatmap from matrix.tsv

########## input ############

# is called if "mutation_profile.tsv" is not given
# runs covsonar with db and returns mutation profile as tsv
# input:
# function:
# output:
# cmd for creating csv file
# python3 covsonar/sonar.py match --db data/rki.db --date 2021-05-01:2021-05-07 --tsv > mutation_profile.tsv 
def check_covsonar_input(filename):
    boolean = path.exists(filename)
    return boolean

# read every file from command
# which files are needed/possible? 
# is function needed or just file open argv?  
# input:
# function:
# output:
def covonar_input(db_path, time_period, covsonar_output_path):
    covsonar_cmd = os.system(f"python3 covsonar/sonar.py match --db {db} --date {time_period} --tsv > {covsonar_output_path}")
    return covsonar_cmd

########## main functionality ############
# uses mutation profile to gather absolute numbers of mutations 
# input:
# function:
# output:
def init(args):
    return

# calculates relative mutation numbers based on init and options 
# input:
# function:
# output:
def frequency(args):
    return


########## optional parameters ############

## input parameters 

# optional
# need to check that
# input:
# function:
# output:
def time_period(args):
    return


## output parameters 


# entry point
def main():
    # Container to hold the arguments
    parser = argparse.ArgumentParser(description='VOC PCR Finder')
    #input
    # tsv covsonar output mutation profile , --tsv
    # db, --db
    # date range, --date_range

    # aa_profile.txt, --aa_mutation
    # lineage.txt, --lineage
    # consensus related, --sequences 
    parser.add_argument('-tsv', '--mutation_profile', metavar='', required=False, help='choose mutation_profile (TSV) generated by covsonar from input directory')
    parser.add_argument('-db', '--database', metavar='', required=False, help='database including virus variant whole genomes send to RKI daily')
    parser.add_argument('-date', '--date_range', metavar='', required=False, help='optional: statistic will be computed for sequences of given time range (y-m-d:y-m-d), e.g.: 2021-05-01: 2021-05-07')
    parser.add_argument('-aa', '--aa_mutations', metavar='', required=False, help='optional: choose specific aa mutations which are set in TXT file')
    parser.add_argument('-lin', '--lineages', metavar='', required=False, help='optional: choose specific VOI/VOC lineages which are set in TXT file')
    args = parser.parse_args()
    
    #Step1: check if covsonar mutation profile (output tsv) is given
    if not args.mutation_profile: #maybe while ?
        print ("File doesnt exists: \n"
                "Covsonar running ...")
        if args.date_range:
            print(f"Mutation profile for {args.database} within {args.date_range} will be created")
            os.system(f"python3 covsonar/sonar.py match --db {args.database} --date {args.date_range} --tsv > input/mutation_profile.tsv")
        if args.date_range and args.aa_mutations: #what about combinations of mutations? covsonar must be executed twice, #problemo
                                                                                                                        #1) either without combinations with -i option
                                                                                                                        #2) combinations with -i bla -i option 
            with open(args.aa_mutations, 'r') as file:
                mutations = file.read().replace('\n', ' ')
            os.system(f"python3 covsonar/sonar.py match --db {args.database} --date {args.date_range} --include {mutations} --tsv > input/mutation_specific_profile.tsv")
        else:
            print("Date range is required if there is no mutation profile tsv !") #covsonar doesnt work without data - errorhandling
    else:
        print ("An mutation profile (covsonar output) exists:"+str(args.mutation_profile))
        print ("Move on with statistics ...")
        df_mutation_profile = pd.read_table(args.mutation_profile)
        #compute absolute values of mutations (dict)
        df_num_lineage = df_mutation_profile['lineage'].value_counts().rename_axis('lineage').reset_index(name='counts')
        dict_num_lineage = pd.Series(df_num_lineage.counts.values,index=df_num_lineage.lineage).to_dict()
        #compute absolute values of mutations (dict)
        lineage_list = df_num_lineage['lineage'].tolist()
        for lineage in lineage_list:
            df_lineages = df_mutation_profile.loc[df_mutation_profile['lineage'] == lineage]
            list_aa_mutations = list(itertools.chain(*[i.split() for i in df_lineages['aa_profile'].tolist()])) #print(type(Counter(list_aa_mutations))) for a dict like structure
            df_num_mutations = pd.Series(list_aa_mutations).value_counts().rename_axis('aa_mutation').reset_index(name='counts')
            dict_num_mutation = pd.Series(df_num_mutations.counts.values,index=df_num_mutations.aa_mutation).to_dict()
            dict_num_lineage_mutations = {lineage:dict_num_mutation}
        #compute frequencies (dict)
        

    
    
    #now there exists a mutation profile 
    #Step3: else, if time_period is given use mutation profile + time_period to run def init(args)
    #
    #
    #
    quit()
    # test: python3 covsonar/sonar.py match --db data/rki.db --date 2021-05-01:2021-05-07 --tsv > mutation_profile.tsv
    # python3 covsonar/sonar.py match --db data/rki.db --include S: E484K --lineage B.1.1.7 --date 2021-05-01: 2021-05-07 --tsv > mutation_specific_profile.tsv
    fields = ['lineage', 'aa_profile']
    df_lineage = pd.read_table('input/mutation_specific_profile.tsv', usecols=fields) #only need "lineage" and "aa_profile"
    df_lineage = df_lineage.groupby(df_lineage.columns.tolist(), as_index=False).size()
    df_lineage["frequency"] = df_lineage["size"] / len(df_lineage)

    df = pd.read_table('input/mutation_profile.tsv', usecols=fields)
    df = df.groupby(df.columns.tolist(), as_index=False).size()
    df["frequency"] = df["size"] / len(df)

    # are in the cell of aa_profiles only combinations of mutations from that sequence in that lineage or just all of the mutations listed and we have to seperate them?
    #df3 = df2.teams.apply(pd.Series)
    df_lineage_mutations = df_lineage.aa_profile.str.split(expand=True) #df[‘name’] = df.name.str.split(" ", expand=True)
    df_lineage_mutations = df_lineage_mutations.apply(pd.Series.value_counts)
    df_lineage_mutations["counts"] = df_lineage_mutations.sum(axis=1)
    df_lineage_mutations["frequencies"] = df_lineage_mutations["counts"] / len(df_lineage_mutations)
    print(df_lineage_mutations)


if __name__ == '__main__':
    main()